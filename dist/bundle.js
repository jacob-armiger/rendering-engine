/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/api/obj-calc-api.js":
/*!********************************!*\
  !*** ./js/api/obj-calc-api.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBoundingVector\": () => (/* binding */ calculateBoundingVector),\n/* harmony export */   \"calculateTangents\": () => (/* binding */ calculateTangents),\n/* harmony export */   \"calculateVertexNormals\": () => (/* binding */ calculateVertexNormals)\n/* harmony export */ });\n/* harmony import */ var _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/gl-matrix/esm/index.js */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/gl-matrix/esm/index.js */ \"./node_modules/gl-matrix/esm/vec2.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/**\n * calculateBoundingVector loads server local resource as text data (one large string with newlines)\n * @param {Object} bbox Bounds of the viewport\n */\nfunction calculateBoundingVector(bbox) {\n  var span = [];\n  var unitspan = [];\n  var maxXYZ = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(bbox.maxX, bbox.maxY, bbox.maxZ);\n  var minXYZ = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(bbox.minX, bbox.minY, bbox.minZ);\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.sub(span, maxXYZ, minXYZ);\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.normalize(unitspan, span);\n  var xScale = unitspan[0] / span[0];\n  var yScale = unitspan[1] / span[1];\n  var zScale = unitspan[2] / span[2];\n  var scalingVector = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(xScale, yScale, zScale);\n  return scalingVector;\n}\n\n/**\n * calculateVertexNormals calculates vertex normals using face and vertex object information\n * @param {Object} faces\n * @param {Object} vertices\n */\nfunction calculateVertexNormals(faces, vertices) {\n  var calculatedNormals = new Array(vertices.length);\n  var vert_map = new Map();\n\n  // Loop through faces\n  for (var i = 0; i < faces.length; i++) {\n    // Set vertex normal index so that normalData can be created\n    faces[i].vertices[0].vertexNormalIndex = faces[i].vertices[0].vertexIndex;\n    faces[i].vertices[1].vertexNormalIndex = faces[i].vertices[1].vertexIndex;\n    faces[i].vertices[2].vertexNormalIndex = faces[i].vertices[2].vertexIndex;\n\n    // get vertices from indexes\n    var v1_index = faces[i].vertices[0].vertexIndex - 1;\n    var v2_index = faces[i].vertices[1].vertexIndex - 1;\n    var v3_index = faces[i].vertices[2].vertexIndex - 1;\n    var v1 = [vertices[v1_index].x, vertices[v1_index].y, vertices[v1_index].z];\n    var v2 = [vertices[v2_index].x, vertices[v2_index].y, vertices[v2_index].z];\n    var v3 = [vertices[v3_index].x, vertices[v3_index].y, vertices[v3_index].z];\n    var face_normal = [0, 0, 0];\n    var u = [];\n    var w = [];\n    // Calculate face_normal\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.subtract(u, v2, v1);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.subtract(w, v3, v1);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.cross(face_normal, u, w);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.normalize(face_normal, face_normal);\n\n    // Add face normal to map\n    for (var _i = 0, _arr = [v1_index, v2_index, v3_index]; _i < _arr.length; _i++) {\n      var vert_index = _arr[_i];\n      if (vert_map.has(vert_index)) {\n        vert_map.get(vert_index).push(face_normal);\n      } else {\n        vert_map.set(vert_index, [face_normal]);\n      }\n    }\n  }\n\n  // Calculate vertex normals with face normals\n  vert_map.forEach(function (face_norms, vert_ind) {\n    var vert_norm = [0, 0, 0];\n    var count = 0;\n    var _iterator = _createForOfIteratorHelper(face_norms),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var norm = _step.value;\n        count += 1;\n        _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.add(vert_norm, vert_norm, norm);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.divide(vert_norm, vert_norm, [count, count, count]);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.normalize(vert_norm, vert_norm);\n    var vert_obj = {\n      x: vert_norm[0],\n      y: vert_norm[1],\n      z: vert_norm[2]\n    };\n    // Add vertex to in correct order\n    calculatedNormals[vert_ind] = vert_obj;\n  });\n  return calculatedNormals;\n}\n\n/**\n * calculateTangents calculates the tangents and bitangents of an object\n * @param {Array} vertVecs\n * @param {Array} uvVecs\n */\nfunction calculateTangents(vertVecs, uvVecs) {\n  // There are 3 values(x,y,z) per vertex and 3 vertices per triangle\n  var triangle_num = vertVecs.length / 3 / 3;\n  var tangents = [];\n  var bitangents = [];\n  var tangentX = null;\n  var tangentY = null;\n  var tangentZ = null;\n  var bitangentX = null;\n  var bitangentY = null;\n  var bitangentZ = null;\n  var vCount = 0;\n  var uvCount = 0;\n  for (var i = 0; i < triangle_num; i++) {\n    // Get positions from vertVecs list. Positions are stored as contiguous array\n    // of x,y,z values and each triangle has 3 vertices so we iterate through the\n    // vector nine times to get 3 positions for 1 triangle.\n    var pos1 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(vertVecs[0 + vCount], [1 + vCount], [2 + vCount]);\n    vCount += 3;\n    var pos2 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(vertVecs[0 + vCount], [1 + vCount], [2 + vCount]);\n    vCount += 3;\n    var pos3 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.fromValues(vertVecs[0 + vCount], [1 + vCount], [2 + vCount]);\n    vCount += 3;\n\n    // Get uv coordinates. Stored similarly as the positions but there are only\n    // 2 values (u,v) per vertices.\n    var uv1 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.fromValues(uvVecs[0 + uvCount], [1 + uvCount]);\n    uvCount += 2;\n    var uv2 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.fromValues(uvVecs[0 + uvCount], [1 + uvCount]);\n    uvCount += 2;\n    var uv3 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.fromValues(uvVecs[0 + uvCount], [1 + uvCount]);\n    uvCount += 2;\n\n    // Calculate the edges and UV deltas of the triangle. These are used to \n    // calculate the tangent and bitangent as a system of equations\n    var edge1 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n    var edge2 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n    var deltaUV1 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    var deltaUV2 = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.subtract(edge1, pos2, pos1);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.subtract(edge2, pos3, pos1);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.subtract(deltaUV1, uv2, uv1);\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_1__.subtract(deltaUV2, uv3, uv1);\n\n    // Fraction is 1 over the determinant of the matrix/system\n    var fraction = 1.0 / (deltaUV1[0] * deltaUV2[1] - deltaUV2[0] * deltaUV1[1]);\n\n    // Calculate the tangent and bitangent for the triangle\n    // [0] [1] and [2] are equivalent to x,y,z \n    tangentX = fraction * (deltaUV2[1] * edge1[0] - deltaUV1[1] * edge2[0]);\n    tangentY = fraction * (deltaUV2[1] * edge1[1] - deltaUV1[1] * edge2[1]);\n    tangentZ = fraction * (deltaUV2[1] * edge1[2] - deltaUV1[1] * edge2[2]);\n    bitangentX = fraction * (-deltaUV2[0] * edge1[0] + deltaUV1[0] * edge2[0]);\n    bitangentY = fraction * (-deltaUV2[0] * edge1[1] + deltaUV1[0] * edge2[1]);\n    bitangentZ = fraction * (-deltaUV2[0] * edge1[2] + deltaUV1[0] * edge2[2]);\n\n    // Tangent and bitangent is pushed three times since each triangle has 3 vertices.\n    // A triangle is a flat shape so it's okay that they're the same\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      tangents.push(tangentX);\n      tangents.push(tangentY);\n      tangents.push(tangentZ);\n      bitangents.push(bitangentX);\n      bitangents.push(bitangentY);\n      bitangents.push(bitangentZ);\n    }\n  }\n  return {\n    tangentData: tangents,\n    bitangentData: bitangents\n  };\n}\n\n\n//# sourceURL=webpack://rendering-engine/./js/api/obj-calc-api.js?");

/***/ }),

/***/ "./js/api/utils-api.js":
/*!*****************************!*\
  !*** ./js/api/utils-api.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createNormalTextures\": () => (/* binding */ createNormalTextures),\n/* harmony export */   \"degreesToRadians\": () => (/* binding */ degreesToRadians),\n/* harmony export */   \"generateDepthMap\": () => (/* binding */ generateDepthMap),\n/* harmony export */   \"generateTexture\": () => (/* binding */ generateTexture),\n/* harmony export */   \"getRandomDec\": () => (/* binding */ getRandomDec),\n/* harmony export */   \"getRandomInt\": () => (/* binding */ getRandomInt),\n/* harmony export */   \"loadNetworkResourceAsText\": () => (/* binding */ loadNetworkResourceAsText),\n/* harmony export */   \"renderDynamicShape\": () => (/* binding */ renderDynamicShape),\n/* harmony export */   \"transformObject\": () => (/* binding */ transformObject)\n/* harmony export */ });\n/* harmony import */ var _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/gl-matrix/esm/index.js */ \"./node_modules/gl-matrix/esm/mat4.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/* --------------------------- \n  FUNCTIONS TO HANDLE TEXTURES\n  --------------------------*/\n/**\n * generateTexture takes different types of resources and applies it to a texture that can be used in a shader\n * @param {String} src  this is an image file or cubemap folder\n * @param {String} type \"image\", \"cubemap\", \"dynamicCubemap\"\n */\nfunction generateTexture(src, type) {\n  var texture = gl.createTexture();\n  if (type == \"image\" || type == \"normalmap\") {\n    if (type == \"image\") {\n      src = \"../../shared/resources/images/\" + src;\n    }\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Fill the texture with a 1x1 blue pixel.\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n\n    // Asynchronously load an image\n    var image = new Image();\n    image.src = src;\n    image.addEventListener('load', function () {\n      // Now that the image has loaded make copy it to the texture.\n\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, image.naturalWidth, image.naturalHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n      // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n      gl.generateMipmap(gl.TEXTURE_2D);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n  } else if (type == \"cubemap\") {\n    src = \"../../shared/resources/cubemaps/\" + src;\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n    var faces = [{\n      cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      src: src + \"posx.jpg\"\n    }, {\n      cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n      src: src + \"negx.jpg\"\n    }, {\n      cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      src: src + \"posy.jpg\"\n    }, {\n      cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n      src: src + \"negy.jpg\"\n    }, {\n      cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n      src: src + \"posz.jpg\"\n    }, {\n      cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,\n      src: src + \"negz.jpg\"\n    }];\n    faces.forEach(function (face) {\n      var cubeSide = face.cubeSide,\n        src = face.src;\n\n      // Fill the texture with a 1x1 blue pixel.\n      gl.texImage2D(cubeSide, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n\n      // Asynchronously load an image\n      var image = new Image();\n      image.src = src;\n      image.addEventListener('load', function () {\n        // Image now loaded\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n        gl.texImage2D(cubeSide, 0, gl.RGBA, 2048, 2048, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n      });\n    });\n    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  } else if (type == \"dynamicCubemap\") {\n    // Create texture to render to\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    // gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    // gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n  }\n  return texture;\n}\n\n/**\n * createNormalTextures generates textures from normalmap source\n * @param assetGroup the name of the folder that contains the assets needed\n */\nfunction createNormalTextures(assetGroup) {\n  var tex_norm = generateTexture(\"../../shared/resources/grouped_assets/\".concat(assetGroup, \"/normal.jpg\"), \"normalmap\");\n  var tex_diffuse = generateTexture(\"../../shared/resources/grouped_assets/\".concat(assetGroup, \"/diffuse.jpg\"), \"normalmap\");\n  var tex_specular = generateTexture(\"../../shared/resources/grouped_assets/\".concat(assetGroup, \"/specular.jpg\"), \"normalmap\");\n  var tex_ambient = null;\n  var tex_rough = null;\n  // tex_ambient = generateTexture(`../../shared/resources/grouped_assets/${assetGroup}/ambient.jpg`, \"normalmap\");\n  // tex_rough = generateTexture(`../../shared/resources/grouped_assets/${assetGroup}/roughness.jpg`, \"normalmap\");\n  // tex_depth = generateTexture(`../../shared/resources/grouped_assets/${assetGroup}/height.png`, \"normalmap\");\n  // tex_reg = generateTexture(`../../shared/resources/grouped_assets/${assetGroup}/hd_wood.png`, \"normalmap\");\n  // return {normalTex: tex_norm, diffuseTex: tex_diffuse, depthTex: tex_depth, regTex: tex_reg}\n  return {\n    normalTex: tex_norm,\n    diffuseTex: tex_diffuse,\n    specularTex: tex_specular,\n    ambientTex: tex_ambient,\n    roughTex: tex_rough\n  };\n}\n\n/**\n * generateDepthMap creates a depth map\n */\nfunction generateDepthMap() {\n  // Create 2D texture to use as Frame buffer's depth buffer\n  var depthTexture = gl.createTexture();\n  var depthTextureSize = 512;\n  gl.bindTexture(gl.TEXTURE_2D, depthTexture);\n  gl.texImage2D(gl.TEXTURE_2D,\n  // target\n  0,\n  // mip level\n  gl.DEPTH_COMPONENT32F,\n  // internal format\n  depthTextureSize,\n  // width\n  depthTextureSize,\n  // height\n  0,\n  // border\n  gl.DEPTH_COMPONENT,\n  // format\n  gl.FLOAT,\n  // type\n  null);\n\n  // Create framebuffer object\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n  // Attach depthTexture to framebuffer\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);\n  return [depthTexture, fb];\n}\n\n/* ----------------------------------------------------\n  FUNCTIONS TO HANDLE OBJECT RENDERING AND MULTI-PASSES \n  ---------------------------------------------------*/\n/**\n * renderDynamicShape takes a shape meant to have a dynamic cubemap and creates the frames for it\n * @param {Object} object  shape meant to have dynamicCubemap\n * @param {Matrix} projectionMatrix\n * @param {List} shapes\n * @param {Matrix} modelMatrix\n * \n */\nfunction renderDynamicShape(object, projectionMatrix, shapes, modelMatrix, viewMatrix, sliderVals, cameraPos, cameraFocus) {\n  var sides = [{\n    cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_X\n  }, {\n    cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_X\n  }, {\n    cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_Y\n  }, {\n    cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_Y\n  }, {\n    cubeSide: gl.TEXTURE_CUBE_MAP_POSITIVE_Z\n  }, {\n    cubeSide: gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n  }];\n  var frames = [{\n    //posx\n    look: [1, 0, 0],\n    up: [0, 1, 0]\n  }, {\n    //negx\n    look: [-1, 0, 0],\n    up: [0, 1, 0]\n  }, {\n    //posy\n    look: [0, 1, 0],\n    up: [0, 0, -1]\n  }, {\n    // negy\n    look: [0, -1, 0],\n    up: [0, 0, 1]\n  }, {\n    //posz\n    look: [0, 0, 1],\n    up: [0, 1, 0]\n  }, {\n    //negz\n    look: [0, 0, -1],\n    up: [0, 1, 0]\n  }];\n\n  // Create frames for cubemap\n  for (var i = 0; i < 6; i++) {\n    // render to texture by binding fb\n    var fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, sides[i].cubeSide, object.texture, 0);\n\n    // gl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n    // render cube with empty texture\n    // gl.bindTexture(gl.TEXTURE_2D, cube.texture)\n    // // Convert clip space to pixxels\n    gl.viewport(0, 0, 256, 256);\n    //clear the canvas(cube side) and depth buffer\n    gl.clearColor(0.2, 0.4, 0.6, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    var _aspect = 256 / 256;\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.perspective(projectionMatrix, degreesToRadians(-90), 1.0, 0.1, 100.0);\n\n    /* DRAW SHAPES TO FRAMEBUFFER */\n    var _iterator = _createForOfIteratorHelper(shapes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var shape = _step.value;\n        var _modelMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n\n        // Transform shape\n        transformObject(shape, _modelMatrix);\n\n        // Create view from cube's perpective\n        var _viewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n        var _cameraPos = object.position;\n        var _cameraFocus = frames[i].look;\n        var upDir = frames[i].up;\n        _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.lookAt(_viewMatrix, _cameraPos, _cameraFocus, upDir); // does up vector need to be changed? ortho to y?\n\n        // Update Model View Matrix\n        shape.modelViewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n        _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.mul(shape.modelViewMatrix, _viewMatrix, _modelMatrix);\n        if (shape.drawableInitialized) {\n          if (shape.shaderType == \"image\") {\n            gl.bindTexture(gl.TEXTURE_2D, shape.texture);\n          } else if (shape.shaderType == \"cubemap\") {\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, shape.texture);\n          }\n        }\n        if (shape.drawableInitialized) {\n          shape.myDrawable.draw();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  /* DRAW OBJECT TO CANVAS*/\n  // Update Model Matrix\n  modelMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.translate(modelMatrix, modelMatrix, object.position); // translate object away from center\n  if (object.rotateOnTime) {\n    // rotate object on its own axis either continuously with time or not\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.rotate(modelMatrix, modelMatrix, globalTime, object.rotationAxis);\n  } else {\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.rotate(modelMatrix, modelMatrix, object.roationDegree, object.rotationAxis);\n  }\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.scale(modelMatrix, modelMatrix, object.scaleVector); // scale object to variable size\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.scale(modelMatrix, modelMatrix, object.boundingVector); // normalize object to bounds\n\n  // Update View Matrix\n  viewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n  cameraPos = [sliderVals.get(\"camXVal\"), sliderVals.get(\"camYVal\"), sliderVals.get(\"camZVal\")];\n  cameraFocus = [sliderVals.get(\"lookXVal\"), sliderVals.get(\"lookYVal\"), sliderVals.get(\"lookZVal\")];\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.lookAt(viewMatrix, cameraPos, cameraFocus, [0.0, 1.0, 0.0]); // does up vector need to be changed? ortho to y?\n\n  // Update Model View Matrix\n  object.modelViewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.create();\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.mul(object.modelViewMatrix, viewMatrix, modelMatrix);\n\n  // render to the canvas\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  // render the object with the texture we just rendered to\n  gl.bindTexture(gl.TEXTURE_CUBE_MAP, object.texture);\n\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.perspective(projectionMatrix, degreesToRadians(60), aspect, 0.1, 100.0);\n  object.myDrawable.draw();\n}\n\n/**\n * transformObject takes a shape meant to have a dynamic cubemap and creates the frames for it\n * @param {Object} shape  shape to be translated/rotated/animated/scaled\n * @param {mat4} modelMatrix the matrix used to tranform object in world space\n */\nfunction transformObject(shape, modelMatrix) {\n  // scale -> rotation on axis to direction -> translate to distance -> rotate around sun\n  // glMatrix.mat4.rotate(modelMatrix, modelMatrix, globalTime*models[0].speed, models[0].orbitVector);  // orbit around center\n  // TRANSLATE object away from center\n  if (shape.animate) {\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.translate(modelMatrix, modelMatrix, [shape.position[0], Math.tan(shape.animateSpeed * globalTime) * -12, shape.position[2]]);\n  } else {\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.translate(modelMatrix, modelMatrix, shape.position);\n  }\n  // ROTATE object on its own axis either continuously with time or not\n  if (shape.rotateOnTime) {\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.rotate(modelMatrix, modelMatrix, globalTime, shape.rotationAxis);\n  } else {\n    _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.rotate(modelMatrix, modelMatrix, shape.roationDegree, shape.rotationAxis);\n  }\n  // SCALE object to variable size\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.scale(modelMatrix, modelMatrix, shape.scaleVector);\n  // NORMALIZE object to bounds\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_0__.scale(modelMatrix, modelMatrix, shape.boundingVector);\n}\n\n/* ------------------------ \n  FUNCTIONS TO HANDLE MISC. \n  -----------------------*/\n/**\n * degreesToRadians as the name implies\n * @param {Number} degrees The degrees to convert to radians\n */\nfunction degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\n\n/**\n * getRandomDec generate random decimal between 0.2 and 1.2\n */\nfunction getRandomDec() {\n  var num = Math.random() + 0.15;\n  // console.log(num)\n  return num;\n}\n\n/**\n * getRandomInt generate random integer within min/max value\n * @param {Integer} min smallest value wanted\n * @param {Integer} max greatest value wanted\n */\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * loadNetworkResourceAsText loads server local resource as text data (one large string with newlines)\n * @param {String} resource A path to local resource\n */\nfunction loadNetworkResourceAsText(_x) {\n  return _loadNetworkResourceAsText.apply(this, arguments);\n}\nfunction _loadNetworkResourceAsText() {\n  _loadNetworkResourceAsText = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resource) {\n    var response, asText;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(resource);\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return response.text();\n        case 5:\n          asText = _context.sent;\n          return _context.abrupt(\"return\", asText);\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _loadNetworkResourceAsText.apply(this, arguments);\n}\n\n\n//# sourceURL=webpack://rendering-engine/./js/api/utils-api.js?");

/***/ }),

/***/ "./js/drawable.js":
/*!************************!*\
  !*** ./js/drawable.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Drawable\": () => (/* binding */ Drawable)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar Drawable = /*#__PURE__*/function () {\n  /**\n   * Class Constructor\n   * @param {ShaderProgram} shader The shader program to draw this drawable with\n   * @param {Object.<string, VertexArrayData>} bufferMap Map of buffer location _strings_ to respective buffer\n   * @param {ElementArrayData} [elementBuffer=null] OPTIONAL: The buffer containing the indexing information, only specify if USING an IndexBuffer\n   * @param {Number} [verticesCount=null] OPTIONAL: The count of the vertices in the position buffer, only specify if NOT USING an IndexBuffer\n   */\n  function Drawable(shader, bufferMap) {\n    var _this = this;\n    var elementBuffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var verticesCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    _classCallCheck(this, Drawable);\n    _defineProperty(this, \"shader\", null);\n    _defineProperty(this, \"vertexBuffers\", {});\n    _defineProperty(this, \"attributeLocations\", null);\n    _defineProperty(this, \"uniformLocations\", null);\n    _defineProperty(this, \"elementArrayBuffer\", null);\n    _defineProperty(this, \"verticesCount\", null);\n    /**\n     * uniform setup - this is a function that should be defined per drawable\n     * If you are familiar with C++ and not JavaScript, treat this as a member variable\n     * that is a function. \n     */\n    _defineProperty(this, \"uniformSetup\", function () {\n      if (!_this.uniformSetupWarned) {\n        console.warn('A drawable being drawn does not have a uniformSetup function.');\n        _this.uniformSetupWarned = true;\n      }\n    });\n    this.shader = shader;\n    if (!elementBuffer && !verticesCount) {\n      throw 'You must specify an element Index Buffer or vertices count!';\n    }\n    var attributeNames = Object.keys(bufferMap);\n    var attributeLocations = shader.getAttributeLocations(attributeNames);\n    for (var attributeName in bufferMap) {\n      var location = attributeLocations[attributeName];\n      this.vertexBuffers[location] = bufferMap[attributeName];\n    }\n    if (elementBuffer) {\n      this.elementArrayBuffer = elementBuffer;\n    } else {\n      this.verticesCount = verticesCount;\n    }\n  }\n\n  /**\n   * draw - attempts to draw the defined drawable, using the index buffer or specified amount of vertices\n   */\n  _createClass(Drawable, [{\n    key: \"draw\",\n    value: function draw() {\n      // If the drawable is using an index buffer, use that.\n      if (this.elementArrayBuffer && !this.verticesCount) {\n        this.elementArrayBuffer.bindAndEnable();\n      }\n\n      // Make sure the attribute buffers are bound,\n      // If the same drawable is drawn consecutively then these do not need rebound\n      // but that is an optimization. Do not optimize while learning as it leads to mixed results :)\n      for (var bufferLocation in this.vertexBuffers) {\n        this.vertexBuffers[bufferLocation].bindAndEnable(bufferLocation);\n      }\n      gl.useProgram(this.shader.program);\n      this.uniformSetup();\n\n      // If not using an index array, draw as many vertices as loaded in the buffer\n      if (this.verticesCount) {\n        gl.drawArrays(gl.TRIANGLES, 0, this.verticesCount);\n        return;\n      }\n\n      // Otherwise, we need to draw with elements!\n      var offset = 0;\n      gl.drawElements(gl.TRIANGLES, this.elementArrayBuffer.count, this.elementArrayBuffer.type, offset);\n    }\n  }]);\n  return Drawable;\n}();\n\n//# sourceURL=webpack://rendering-engine/./js/drawable.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _shader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shader.js */ \"./js/shader.js\");\n/* harmony import */ var _obj_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./obj-loader.js */ \"./js/obj-loader.js\");\n/* harmony import */ var _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vertex-data.js */ \"./js/vertex-data.js\");\n/* harmony import */ var _model_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model-data.js */ \"./js/model-data.js\");\n/* harmony import */ var _drawable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./drawable.js */ \"./js/drawable.js\");\n/* harmony import */ var _api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/utils-api.js */ \"./js/api/utils-api.js\");\n/* harmony import */ var _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../node_modules/gl-matrix/esm/index.js */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../node_modules/gl-matrix/esm/index.js */ \"./node_modules/gl-matrix/esm/vec3.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n// Ideally, we like to avoid global vars, a GL context lives as long as the window does\n// So this is a case where it is understandable to have it in global space.\nwindow.gl = null;\nwindow.globalTime = 0.0;\nvar modelViewMatrix = null;\nvar projectionMatrix = null;\n\n// These global variables apply to the entire scene for the duration of the program\nvar lightPosition = null;\nvar cameraPos = null;\nvar lightViewMatrix = null;\nvar lightProjectionMatrix = null;\nvar depthTexture = null;\nvar depthFrameBuffer = null;\nvar depthShader = null;\nvar colorShader = null;\nvar vertSrc = null;\nvar fragSrc = null;\nvar shapes = (0,_model_data_js__WEBPACK_IMPORTED_MODULE_3__.createShapeData)();\nfunction main() {\n  var canvas = document.getElementById(\"glCanvas\");\n  // Initialize the GL context\n  gl = canvas.getContext(\"webgl2\");\n  // Makes images not upside down\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n  // Only continue if WebGL is available and working\n  if (gl === null) {\n    alert(\"Unable to initialize WebGL2.\");\n    return;\n  }\n\n  // Set clear color to whatever color this is and fully opaque\n  gl.clearColor(0.2, 0.4, 0.6, 1.0);\n  // Clear the depth buffer\n  gl.clearDepth(1.0);\n  // Enable the depth function to draw nearer things over farther things\n  gl.depthFunc(gl.LEQUAL);\n  gl.enable(gl.DEPTH_TEST);\n\n  // Setup Controls\n  var sliderVals = new Map();\n  sliderVals = setupUI(sliderVals);\n\n  // Draw the scene repeatedly\n  var then = 0.0;\n  function render(now) {\n    now *= 0.001; // convert to seconds\n    var deltaTime = now - then;\n    then = now;\n    drawScene(deltaTime, sliderVals);\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n\n  // The Projection matrix rarely needs updated.\n  // Uncommonly, it is only modified in wacky sequences (\"drunk\" camera effect in GTAV)\n  // or an artificial \"zoom\" using FOV (ARMA3)\n  // Typically it is only updated when the viewport changes aspect ratio.\n  // So, set it up here once since we won't let the viewport/canvas resize.\n  var FOV = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.degreesToRadians)(60);\n  var aspectRatio = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  var zNear = 0.1;\n  var zFar = 100.0;\n  projectionMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.perspective(projectionMatrix, FOV, aspectRatio, zNear, zFar);\n  setupScene();\n}\nfunction setupUI(sliderDict) {\n  // in index.html we need to setup some callback functions for the sliders\n  // right now just have them report the values beside the slider.\n  var sliders = [\"cam\", \"look\", \"light\"];\n  var dims = [\"X\", \"Y\", \"Z\"];\n\n  // for cam and look UI..\n  sliders.forEach(function (controlType) {\n    // for x, y, z control slider...\n    dims.forEach(function (dimension) {\n      var slideID = \"\".concat(controlType).concat(dimension);\n      console.log(\"Setting up control for \".concat(slideID));\n      var slider = document.getElementById(slideID);\n      var sliderVal = document.getElementById(\"\".concat(slideID, \"Val\"));\n      // Initialize dictionary values\n      sliderDict.set(sliderVal.id, sliderVal.value);\n\n      // These are called \"callback functions\", essentially when the input\n      // value for the slider or the field beside the slider change,\n      // run the code we supply here!\n      slider.oninput = function () {\n        var newVal = slider.value;\n        sliderVal.value = newVal;\n\n        // update slider dictionary on slider change\n        sliderDict.set(sliderVal.id, sliderVal.value);\n      };\n      sliderVal.oninput = function () {\n        var newVal = sliderVal.value;\n        slider.value = newVal;\n\n        // update slider dictionary on input change\n        sliderDict.set(sliderVal.id, sliderVal.value);\n      };\n    });\n  });\n  return sliderDict;\n}\n\n// Async as it loads resources over the network.\nfunction setupScene() {\n  return _setupScene.apply(this, arguments);\n}\nfunction _setupScene() {\n  _setupScene = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var depthObjects, _iterator3, _step3, shape, vertSource, fragSource, objData;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Create depth buffer\n          depthObjects = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.generateDepthMap)();\n          depthTexture = depthObjects[0];\n          depthFrameBuffer = depthObjects[1];\n          _context.next = 5;\n          return (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.loadNetworkResourceAsText)(\"/shared/resources/shaders/verts/simple.vert\");\n        case 5:\n          vertSrc = _context.sent;\n          _context.next = 8;\n          return (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.loadNetworkResourceAsText)(\"/shared/resources/shaders/frags/simple.frag\");\n        case 8:\n          fragSrc = _context.sent;\n          depthShader = new _shader_js__WEBPACK_IMPORTED_MODULE_0__.ShaderProgram(vertSrc, fragSrc);\n\n          // These shapes are initialized in model-data.js\n          _iterator3 = _createForOfIteratorHelper(shapes);\n          _context.prev = 11;\n          _iterator3.s();\n        case 13:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 27;\n            break;\n          }\n          shape = _step3.value;\n          _context.next = 17;\n          return (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.loadNetworkResourceAsText)(shape.shaderVertSrc);\n        case 17:\n          vertSource = _context.sent;\n          _context.next = 20;\n          return (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.loadNetworkResourceAsText)(shape.shaderFragSrc);\n        case 20:\n          fragSource = _context.sent;\n          _context.next = 23;\n          return (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.loadNetworkResourceAsText)(shape.objPath);\n        case 23:\n          objData = _context.sent;\n          initializeMyObject(vertSource, fragSource, objData, shape);\n        case 25:\n          _context.next = 13;\n          break;\n        case 27:\n          _context.next = 32;\n          break;\n        case 29:\n          _context.prev = 29;\n          _context.t0 = _context[\"catch\"](11);\n          _iterator3.e(_context.t0);\n        case 32:\n          _context.prev = 32;\n          _iterator3.f();\n          return _context.finish(32);\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[11, 29, 32, 35]]);\n  }));\n  return _setupScene.apply(this, arguments);\n}\nfunction drawScene(deltaTime, sliderVals) {\n  globalTime += deltaTime;\n\n  // Clear the color buffer with specified clear color\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Update light position when user moves light\n  lightPosition = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_7__.fromValues(sliderVals.get(\"lightXVal\"), sliderVals.get(\"lightYVal\"), -sliderVals.get(\"lightZVal\"));\n  // Update View Matrix when user moves camera\n  var viewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n  cameraPos = [sliderVals.get(\"camXVal\"), sliderVals.get(\"camYVal\"), sliderVals.get(\"camZVal\")];\n  var cameraFocus = [sliderVals.get(\"lookXVal\"), sliderVals.get(\"lookYVal\"), sliderVals.get(\"lookZVal\")];\n\n  // Create view matrix from light perspective\n  lightViewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.lookAt(lightViewMatrix, lightPosition, [0.0, 0.0, 0.0], [0.0, 1.0, 0.0]);\n\n  // DRAW TO DEPTH BUFFER\n  gl.bindFramebuffer(gl.FRAMEBUFFER, depthFrameBuffer);\n  gl.viewport(0, 0, 512, 512);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  var _iterator = _createForOfIteratorHelper(shapes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var shape = _step.value;\n      // Model matrix is used to transform object in world space\n      var modelMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n      (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.transformObject)(shape, modelMatrix);\n\n      // Create Model View Matrix (world to camera space)\n      shape.modelViewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n      _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.mul(shape.modelViewMatrix, viewMatrix, modelMatrix);\n      if (shape.depthDrawableInitialized) {\n        shape.depthDrawable.draw();\n      }\n    }\n\n    // DRAW TO CANVAS\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  // gl.clearColor(0, 0, 0, 1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // lookat() creates matrix that transforms vertices from world space to camera space\n  _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.lookAt(viewMatrix, cameraPos, cameraFocus, [0.0, 1.0, 0.0]); // does up vector need to be changed? ortho to y?\n  var _iterator2 = _createForOfIteratorHelper(shapes),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _shape = _step2.value;\n      // Model matrix is used to transform object in world space\n      var _modelMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n      (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.transformObject)(_shape, _modelMatrix);\n\n      // Create Model View Matrix (world to camera space)\n      _shape.modelViewMatrix = _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.create();\n      _node_modules_gl_matrix_esm_index_js__WEBPACK_IMPORTED_MODULE_6__.mul(_shape.modelViewMatrix, viewMatrix, _modelMatrix);\n      if (_shape.drawableInitialized) {\n        // Create extra framebuffer frames if dynamic cubemap\n        if (_shape.shaderType == \"dynamicCubemap\") {\n          (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.renderDynamicShape)(_shape, projectionMatrix, shapes, _modelMatrix, viewMatrix, sliderVals, cameraPos, cameraFocus);\n          continue; // `renderDynamicShape` handles drawing of shape\n        }\n\n        _shape.myDrawable.draw();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nfunction initializeMyObject(vertSource, fragSource, objData, shape) {\n  // Assign shader information to shape\n  shape.shaderProgram = new _shader_js__WEBPACK_IMPORTED_MODULE_0__.ShaderProgram(vertSource, fragSource); // NOTE: could optimize for redundant shaders\n\n  var rawData = null;\n  var parsedData = new _obj_loader_js__WEBPACK_IMPORTED_MODULE_1__.OBJData(objData); // this class is in obj-loader.js\n  rawData = parsedData.getFlattenedDataFromModelAtIndex(0);\n\n  // Set bounding Vector\n  shape.boundingVector = rawData.boundingVector;\n  // Generate Buffers on the GPU using the geometry data we pull from the obj\n  var vertexPositionBuffer = new _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__.VertexArrayData(\n  // this class is in vertex-data.js\n  rawData.vertices,\n  // What is the data?\n  gl.FLOAT,\n  // What type should WebGL treat it as?\n  3 // How many per vertex?\n  );\n\n  var vertexNormalBuffer = new _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__.VertexArrayData(rawData.normals, gl.FLOAT, 3);\n  var vertexTexCoordBuffer = new _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__.VertexArrayData(rawData.uvs, gl.FLOAT, 2);\n  var vertexTangBuffer = new _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__.VertexArrayData(rawData.tangents, gl.FLOAT, 3);\n  var vertexBitangBuffer = new _vertex_data_js__WEBPACK_IMPORTED_MODULE_2__.VertexArrayData(rawData.bitangents, gl.FLOAT, 3);\n  /* let vertexBarycentricBuffer = new VertexArrayData (\n      rawData.barycentricCoords,\n      gl.FLOAT,\n      3\n  ); */\n\n  // For any model that is smooth (non discrete) indices should be used, but we are learning! Maybe you can get this working later? One indicator if a model is discrete: a vertex position has two normals. A cube is discrete if only 8 vertices are used, but each vertex has 3 normals (each vertex is on the corner of three faces!) The sphere and bunny obj models are smooth though */\n  // getFlattenedDataFromModelAtIndex does not return indices, but getIndexableDataFromModelAtIndex would;\n  // let vertexIndexBuffer = new ElementArrayData(rawData.indices);\n\n  // In order to let our shader be aware of the vertex data, we need to bind these buffers to the attribute location inside of the vertex shader. The attributes in the shader must have the name specified in the following object or the draw call will fail, possibly silently!\n  var bufferMap = {\n    aVertexPosition: vertexPositionBuffer,\n    aVertexNormal: vertexNormalBuffer\n  };\n\n  // Textures used for normalmaps. Declared here for scope.\n  var _ref = {},\n    normalTex = _ref.normalTex,\n    diffuseTex = _ref.diffuseTex,\n    ambientTex = _ref.ambientTex,\n    specularTex = _ref.specularTex;\n\n  // Conditionally create textures and set buffermap\n  if (shape.shaderType == \"normalmap\") {\n    bufferMap[\"aVertexTexCoord\"] = vertexTexCoordBuffer; // uvs\n    bufferMap[\"aVertexTang\"] = vertexTangBuffer;\n    bufferMap[\"aVertexBitang\"] = vertexBitangBuffer;\n    var _createNormalTextures = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.createNormalTextures)(shape.shader);\n    normalTex = _createNormalTextures.normalTex;\n    diffuseTex = _createNormalTextures.diffuseTex;\n    ambientTex = _createNormalTextures.ambientTex;\n    specularTex = _createNormalTextures.specularTex;\n  } else {\n    if (shape.shaderType == \"image\") {\n      bufferMap[\"aVertexTexCoord\"] = vertexTexCoordBuffer;\n    }\n    shape.texture = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_5__.generateTexture)(shape.shader, shape.shaderType);\n  }\n\n  // Set shape's drawable\n  shape.myDrawable = new _drawable_js__WEBPACK_IMPORTED_MODULE_4__.Drawable(shape.shaderProgram, bufferMap, null, rawData.vertices.length / 3);\n  shape.depthDrawable = new _drawable_js__WEBPACK_IMPORTED_MODULE_4__.Drawable(depthShader, {}, null, rawData.vertices.length / 3);\n  shape.depthDrawable.uniformLocations = depthShader.getUniformLocations([\"uLightViewMatrix\", \"uProjectionMatrix\"]);\n  shape.depthDrawable.uniformSetup = function () {\n    gl.uniformMatrix4fv(shape.depthDrawable.uniformLocations.uProjectionMatrix, false, projectionMatrix);\n    gl.uniformMatrix4fv(shape.depthDrawable.uniformLocations.uLightViewMatrix, false, lightViewMatrix);\n    shape.depthDrawableInitialized = true;\n  };\n\n  // Checkout the drawable class' draw function. It calls a uniform setup function every time it is drawn.\n  // Put your uniforms that change per frame in this setup function.\n  shape.myDrawable.uniformLocations = shape.shaderProgram.getUniformLocations([\"uModelViewMatrix\", \"uProjectionMatrix\", \"uLightPosition\", \"uCameraPosition\", \"uTexture\", \"uProjectedTexture\", \"uTexNorm\", \"uTexDiffuse\", \"uTexAmbient\", \"uTexSpecular\"]);\n  shape.myDrawable.uniformSetup = function () {\n    gl.uniformMatrix4fv(shape.myDrawable.uniformLocations.uProjectionMatrix, false, projectionMatrix);\n    gl.uniformMatrix4fv(shape.myDrawable.uniformLocations.uModelViewMatrix, false, shape.modelViewMatrix);\n    gl.uniform3fv(shape.myDrawable.uniformLocations.uLightPosition, lightPosition);\n    gl.uniform3fv(shape.myDrawable.uniformLocations.uCameraPosition, cameraPos);\n    gl.uniform1i(shape.myDrawable.uniformLocations.uTexture, shape.texture);\n    gl.uniform1i(shape.myDrawable.uniformLocations.uProjectedTexture, depthTexture);\n    /* BIND APPROPRIATE TEXTURE TYPE */\n    if (shape.shaderType == \"image\") {\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, shape.texture);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexture, shape.texture);\n    } else if (shape.shaderType == \"cubemap\" || shape.shaderType == \"dynamicCubemap\") {\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_CUBE_MAP, shape.texture);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexture, shape.texture);\n    }\n    if (shape.shaderType == \"normalmap\") {\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, normalTex);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexNorm, 0);\n      gl.activeTexture(gl.TEXTURE1);\n      gl.bindTexture(gl.TEXTURE_2D, diffuseTex);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexDiffuse, 1);\n      gl.activeTexture(gl.TEXTURE2);\n      gl.bindTexture(gl.TEXTURE_2D, ambientTex);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexAmbient, 2);\n      gl.activeTexture(gl.TEXTURE3);\n      gl.bindTexture(gl.TEXTURE_2D, specularTex);\n      gl.uniform1i(shape.myDrawable.uniformLocations.uTexSpecular, 3);\n    }\n  };\n  shape.drawableInitialized = true;\n}\n\n// After all the DOM has loaded, we can run the main function.\n// window.onload = main;\nmain(); // NOTE: use this when bundling\n\n//# sourceURL=webpack://rendering-engine/./js/main.js?");

/***/ }),

/***/ "./js/model-data.js":
/*!**************************!*\
  !*** ./js/model-data.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createShapeData\": () => (/* binding */ createShapeData)\n/* harmony export */ });\n/* harmony import */ var _api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/utils-api.js */ \"./js/api/utils-api.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar Shape = /*#__PURE__*/function () {\n  function Shape() {\n    _classCallCheck(this, Shape);\n    // Sources\n    this.objPath = \"\";\n    this.shader = null;\n    this.shaderType = null;\n\n    // World translation data\n    this.animate = false;\n    this.animateSpeed = 1;\n    this.position = [0, 0, 0];\n    this.scaleVector = [4, 4, 4];\n    this.boundingVector = [1, 1, 1];\n    this.rotationAxis = [0, 1, 0];\n    this.roationDegree = 10;\n    this.rotateOnTime = false;\n\n    // Info for shape's shader program\n    this.shaderVertSrc = null;\n    this.shaderFragSrc = null;\n    this.modelViewMatrix = null;\n\n    // Maintain instance of shader prgram\n    this.shaderProgram = null;\n    this.texture = null;\n    this.targetTexture = null;\n\n    // Maintain instance of drawable\n    this.myDrawable = null;\n    this.depthDrawable = null;\n    this.drawableInitialized = false;\n    this.depthDrawableInitialized = false;\n  }\n  _createClass(Shape, [{\n    key: \"setRotationValues\",\n    value: function setRotationValues(axis, degree, onTime) {\n      this.rotationAxis = axis;\n      this.roationDegree = degree;\n      this.rotateOnTime = onTime;\n    }\n  }, {\n    key: \"scaleObject\",\n    value: function scaleObject(scalar) {\n      this.scaleVector = [scalar, scalar, scalar];\n    }\n  }, {\n    key: \"scaleByAxis\",\n    value: function scaleByAxis(x, y, z) {\n      this.scaleVector = [x, y, z];\n    }\n  }, {\n    key: \"setPositionValue\",\n    value: function setPositionValue(x, y, z) {\n      this.position = [x, y, z];\n    }\n  }, {\n    key: \"setTexParams\",\n    value: function setTexParams(src, type) {\n      this.shader = src;\n      this.shaderType = type;\n    }\n  }, {\n    key: \"setObj\",\n    value: function setObj(objFile) {\n      this.objPath = \"../../shared/resources/models/\" + objFile;\n    }\n  }, {\n    key: \"setShaderSrc\",\n    value: function setShaderSrc(shaderName) {\n      this.shaderVertSrc = \"../../shared/resources/shaders/verts/\".concat(shaderName, \".vert\");\n      this.shaderFragSrc = \"../../shared/resources/shaders/frags/\".concat(shaderName, \".frag\");\n    }\n  }]);\n  return Shape;\n}();\nfunction createShapeData() {\n  var list = [];\n  var floor0 = new Shape();\n  floor0.setObj(\"plane.obj\");\n  floor0.setShaderSrc(\"textureNormMap\");\n  floor0.setTexParams(\"stone\", \"normalmap\");\n  floor0.setPositionValue(0, -2.7, -3);\n  floor0.scaleByAxis(20, 1, 20);\n  list.push(floor0);\n\n  // /* -------------SCENE----------------- */\n  var reflectiveBall = new Shape();\n  reflectiveBall.setObj(\"sphere_with_vt.obj\");\n  reflectiveBall.setShaderSrc(\"textureCubemap\");\n  reflectiveBall.setTexParams(null, \"dynamicCubemap\");\n  reflectiveBall.setRotationValues([0, 1, 0], 0, false);\n  reflectiveBall.scaleObject(8);\n  reflectiveBall.setPositionValue(0, 0, 0);\n  list.push(reflectiveBall);\n  var column = new Shape();\n  column.setObj(\"objColumn.obj\");\n  column.setShaderSrc(\"texturePhong\");\n  column.setTexParams(\"marble.jpg\", \"image\");\n  column.setPositionValue(2.2, -2.4, -2.2);\n  column.scaleObject(6);\n  column.setRotationValues([0, 1, 0], 2, false);\n  list.push(column);\n  var column2 = new Shape();\n  column2.setObj(\"objColumn.obj\");\n  column2.setShaderSrc(\"texturePhong\");\n  column2.setTexParams(\"marble.jpg\", \"image\");\n  column2.setPositionValue(-2.2, -2.4, -2.2);\n  column2.scaleObject(6);\n  column2.setRotationValues([0, 1, 0], 2, false);\n  list.push(column2);\n  var column3 = new Shape();\n  column3.setObj(\"objColumn.obj\");\n  column3.setShaderSrc(\"texturePhong\");\n  column3.setTexParams(\"marble.jpg\", \"image\");\n  column3.setPositionValue(-2.2, -2.4, -6);\n  column3.scaleObject(6);\n  column3.setRotationValues([0, 1, 0], 2, false);\n  list.push(column3);\n  var column4 = new Shape();\n  column4.setObj(\"objColumn.obj\");\n  column4.setShaderSrc(\"texturePhong\");\n  column4.setTexParams(\"marble.jpg\", \"image\");\n  column4.setPositionValue(2.2, -2.4, -6);\n  column4.scaleObject(6);\n  column4.setRotationValues([0, 1, 0], 2, false);\n  list.push(column4);\n  var fallingColumn = new Shape();\n  fallingColumn.animate = true;\n  fallingColumn.animateSpeed = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__.getRandomDec)();\n  fallingColumn.setObj(\"objColumn.obj\");\n  fallingColumn.setShaderSrc(\"texturePhong\");\n  fallingColumn.setTexParams(\"sidewalk.jpg\", \"image\");\n  fallingColumn.setPositionValue(-6, 0, 5);\n  // fallingColumn.scaleObject(7);\n  fallingColumn.setRotationValues([1, 1, 0], 0, true);\n  list.push(fallingColumn);\n\n  // let apollo = new Shape();\n  // apollo.animate = true\n  // apollo.animateSpeed = getRandomDec()\n  // apollo.setObj(\"apollo.obj\");\n  // apollo.setShaderSrc(\"texturePhong\");\n  // apollo.setTexParams(\"sidewalk.jpg\", \"image\");\n  // apollo.setRotationValues([1, 1, 1], 0, true);\n  // apollo.setPositionValue(4, 0, 5);\n  // list.push(apollo);\n\n  var mars = new Shape();\n  mars.setObj(\"mars.obj\");\n  mars.setShaderSrc(\"phong300\");\n  mars.setTexParams(null, null);\n  mars.setRotationValues([1, 0, 0], 3.2, false);\n  mars.setPositionValue(-1, 1, -4);\n  list.push(mars);\n  var powerT = new Shape();\n  powerT.animate = true;\n  powerT.animateSpeed = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__.getRandomDec)();\n  powerT.setObj(\"box_with_vt.obj\");\n  powerT.setShaderSrc(\"texturePhong\");\n  powerT.setTexParams(\"hd_power_t.png\", \"image\");\n  powerT.setRotationValues([1, 1, 0], 0.3, true);\n  powerT.setPositionValue(0, 0, 5);\n  powerT.scaleObject(1);\n  list.push(powerT);\n  for (var i = 0; i < 60; i++) {\n    var block = new Shape();\n    block.animate = true;\n    block.animateSpeed = (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__.getRandomDec)();\n    block.setObj(\"box_with_vt.obj\");\n    block.setShaderSrc(\"texturePhong\");\n    block.setTexParams(\"sidewalk.jpg\", \"image\");\n    block.setRotationValues([1, 1, 1], 0, true);\n    block.setPositionValue((0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__.getRandomInt)(-8, 8), 0, (0,_api_utils_api_js__WEBPACK_IMPORTED_MODULE_0__.getRandomInt)(5, 8));\n    block.scaleObject(1);\n    list.push(block);\n  }\n  // for(let i = 0; i < 30; i++) {\n  //   let block = new Shape();\n  //   block.animate = true\n  //   block.animateSpeed = getRandomDec()\n  //   block.setObj(\"box_with_vt.obj\");\n  //   block.setShaderSrc(\"texturePhong\");\n  //   block.setTexParams(\"sidewalk.jpg\", \"image\");\n  //   block.setRotationValues([1, 1, 1], 0, true);\n  //   block.setPositionValue(getRandomInt(-8, -3), 0, getRandomInt(-8, 8));\n  //   block.scaleObject(1);\n  //   list.push(block);\n  // }\n  /* --------------SCENE---------------- */\n\n  // let rockball = new Shape();\n  // rockball.setObj(\"sphere_with_vt.obj\");\n  // rockball.setShaderSrc(\"texturePhong\");\n  // rockball.setTexParams(\"sidewalk.jpg\", \"image\");\n  // // rockball.setRotationValues([0, 0, 0], 0, true);\n  // rockball.animate = true\n  // rockball.setPositionValue(0, 0 ,0);\n  // list.push(rockball);\n\n  // let coitBall = new Shape();\n  // coitBall.setObj(\"sphere_with_vt.obj\");\n  // coitBall.setShaderSrc(\"textureCubemap\");\n  // coitBall.setTexParams(\"coit_tower/\", \"cubemap\");\n  // coitBall.setRotationValues([0, 1, 0], 0, false);\n  // coitBall.setPositionValue(4, 3, 0);\n  // list.push(coitBall);\n\n  // let bumpyCube = new Shape()\n  // bumpyCube.setObj(\"box_with_vt.obj\");\n  // bumpyCube.setShaderSrc(\"textureNormMap\")\n  // bumpyCube.setTexParams(\"toy_box\", \"normalmap\")\n  // // bumpyCube.setRotationValues([0, 1, 0], 0, true);\n  // bumpyCube.setPositionValue(-5,1,0)\n  // list.push(bumpyCube)\n\n  return list;\n}\n\n\n//# sourceURL=webpack://rendering-engine/./js/model-data.js?");

/***/ }),

/***/ "./js/obj-loader.js":
/*!**************************!*\
  !*** ./js/obj-loader.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OBJData\": () => (/* binding */ OBJData)\n/* harmony export */ });\n/* harmony import */ var _api_obj_calc_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/obj-calc-api.js */ \"./js/api/obj-calc-api.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar OBJData = /*#__PURE__*/function () {\n  function OBJData(fileContents) {\n    _classCallCheck(this, OBJData);\n    _defineProperty(this, \"result\", {\n      models: [],\n      materialLibraries: []\n    });\n    _defineProperty(this, \"currentMaterial\", '');\n    _defineProperty(this, \"currentGroup\", '');\n    _defineProperty(this, \"smoothingGroup\", 0);\n    _defineProperty(this, \"fileContents\", null);\n    this.fileContents = fileContents;\n    this.parse(this.fileContents);\n  }\n  _createClass(OBJData, [{\n    key: \"parse\",\n    value: function parse() {\n      var stripComment = function stripComment(lineString) {\n        var commentIndex = lineString.indexOf('#');\n        if (commentIndex > -1) {\n          return lineString.substring(0, commentIndex);\n        }\n        return lineString;\n      };\n      var lines = this.fileContents.split('\\n');\n      for (var i = 0; i < lines.length; i += 1) {\n        var line = stripComment(lines[i]);\n        var lineItems = line.replace(/\\s\\s+/g, ' ').trim().split(' ');\n        if (line.length <= 0) continue;\n        switch (lineItems[0].toLowerCase()) {\n          case \"o\":\n            // Start A New Model\n            this.parseObject(lineItems);\n            break;\n          case \"g\":\n            // Start a new polygon group\n            this.parseGroup(lineItems);\n            break;\n          case \"v\":\n            // Define a vertex for the current model\n            this.parseVertexCoords(lineItems);\n            break;\n          case \"vt\":\n            // Texture Coords\n            this.parseTextureCoords(lineItems);\n            break;\n          case \"vn\":\n            // Define a vertex normal for the current model\n            this.parseVertexNormal(lineItems);\n            break;\n          case \"s\":\n            // Smooth shading statement\n            this.parseSmoothShadingStatement(lineItems);\n            break;\n          case \"f\":\n            // Define a Face/Polygon\n            this.parsePolygon(lineItems);\n            break;\n          case \"mtllib\":\n            // Reference to a material library file (.mtl)\n            this.parseMtlLib(lineItems);\n            break;\n          case \"usemtl\":\n            // Sets the current material to be applied to polygons defined from this point forward\n            this.parseUseMtl(lineItems);\n            break;\n          case \"#\":\n            break;\n          case \"\":\n            break;\n          default:\n            console.warn(\"Unhandled obj statement at line #\".concat(i, \": \").concat(line));\n            break;\n        }\n      }\n      return this.result;\n    }\n  }, {\n    key: \"currentModel\",\n    value: function currentModel() {\n      if (this.result.models.length == 0) {\n        this.result.models.push({\n          name: this.defaultModelName,\n          vertices: [],\n          textureCoords: [],\n          vertexNormals: [],\n          faces: [],\n          boundingBox: {\n            maxX: 0,\n            maxY: 0,\n            maxZ: 0,\n            minX: 0,\n            minY: 0,\n            minZ: 0\n          }\n        });\n        this.currentGroup = '';\n        this.smoothingGroup = 0;\n      }\n      return this.result.models[this.result.models.length - 1];\n    }\n  }, {\n    key: \"getModelAtIndex\",\n    value: function getModelAtIndex(index) {\n      return this.result.models[index];\n    }\n\n    /**\n     * getIndexableDataFromModelAtIndex - generates indexable raw geometry data for the model at specified index\n     * @param {Number} index the index of the model you are interested in (multiple models may exist in one obj file) \n     */\n  }, {\n    key: \"getIndexableDataFromModelAtIndex\",\n    value: function getIndexableDataFromModelAtIndex(index) {\n      /*\n      There is no guarantee this function works for 100% of obj models.\n      This assumes for each vertex there is exactly one normal, one position, one texture coord.\n      Some models do not abide by this, such as discrete models.\n      */\n      var model = this.result.models[index];\n      var faces = model.faces;\n      var vertices = model.vertices;\n      var textureCoords = model.textureCoords;\n      var vertexNormals = model.vertexNormals;\n\n      // If model does not have vertex normals, calculate them here.\n      if (vertexNormals < 1) {\n        vertexNormals = (0,_api_obj_calc_api_js__WEBPACK_IMPORTED_MODULE_0__.calculateVertexNormals)(faces, vertices);\n      }\n      var indexData = [];\n      faces.forEach(function (face) {\n        // A face can have 3+ vertices.\n        // Since we want triangles, we turn the face into a fan of triangles.\n        // http://docs.safe.com/fme/2017.1/html/FME_Desktop_Documentation/FME_Workbench/!FME_Geometry/IFMETriangleFan.htm\n        var vertsOnFace = face.vertices;\n        var initialVert = vertsOnFace[0];\n        for (var i = 1; i < vertsOnFace.length - 1; ++i) {\n          var triangle = [initialVert, vertsOnFace[i], vertsOnFace[i + 1]];\n          triangle.forEach(function (triangleVert) {\n            indexData.push(triangleVert.vertexIndex - 1);\n          });\n        }\n      });\n      var textureData = [];\n      textureCoords.forEach(function (coord) {\n        textureData.push(coord.u);\n        textureData.push(coord.v);\n      });\n      var normalData = [];\n      vertexNormals.forEach(function (normal) {\n        normalData.push(normal.x);\n        normalData.push(normal.y);\n        normalData.push(normal.z);\n      });\n      var vertexData = [];\n      vertices.forEach(function (vertex) {\n        vertexData.push(vertex.x);\n        vertexData.push(vertex.y);\n        vertexData.push(vertex.z);\n      });\n      return {\n        indices: indexData,\n        uvs: textureData,\n        normals: normalData,\n        vertices: vertexData\n      };\n    }\n\n    /**\n     * getFlattenedDataFromModelAtIndex - generates flattened geometry data, prefer the indexable method if model is not discrete\n     * @param {Number} index the index of the model you are interested in (multiple models may exist in one obj file) \n     */\n  }, {\n    key: \"getFlattenedDataFromModelAtIndex\",\n    value: function getFlattenedDataFromModelAtIndex(index) {\n      var model = this.result.models[index];\n      var faces = model.faces;\n      var vertices = model.vertices;\n      var textureCoords = model.textureCoords;\n      var vertexNormals = model.vertexNormals;\n      var bbox = model.boundingBox;\n\n      // Create normalized scaling vector based on box bounds\n      var scalingVector = (0,_api_obj_calc_api_js__WEBPACK_IMPORTED_MODULE_0__.calculateBoundingVector)(bbox);\n\n      // If model does not have vertex normals, calculate them here.\n      if (vertexNormals < 1) {\n        console.log(\"Calculating Vertex Normals\");\n        vertexNormals = (0,_api_obj_calc_api_js__WEBPACK_IMPORTED_MODULE_0__.calculateVertexNormals)(faces, vertices);\n      }\n      if (textureCoords < 1) {\n        console.log(\"no tex coords\");\n      }\n\n      // This is just for the wireframe shader, feel free to remove this information if not necessary\n      // I am only including it here for a cheap wireframe effect.\n      var barycentricCoords = [];\n      var barycentricValues = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]];\n      var textureData = [];\n      var normalData = [];\n      var vertexData = [];\n      var tangentData = [];\n      var bitangentData = [];\n      faces.forEach(function (face) {\n        // A face can have 3+ vertices.\n        // Since we want triangles, we turn the face into a fan of triangles.\n        // http://docs.safe.com/fme/2017.1/html/FME_Desktop_Documentation/FME_Workbench/!FME_Geometry/IFMETriangleFan.htm\n        var vertsOnFace = face.vertices;\n        var initialVert = vertsOnFace[0];\n        for (var i = 1; i < vertsOnFace.length - 1; ++i) {\n          var triangle = [initialVert, vertsOnFace[i], vertsOnFace[i + 1]];\n          triangle.forEach(function (triangleVert, index) {\n            // Obj models are not zero index, so we subtract 1 from the indicated indices\n            vertexData.push(vertices[triangleVert.vertexIndex - 1].x);\n            vertexData.push(vertices[triangleVert.vertexIndex - 1].y);\n            vertexData.push(vertices[triangleVert.vertexIndex - 1].z);\n            if (textureCoords[triangleVert.textureCoordsIndex - 1]) {\n              textureData.push(textureCoords[triangleVert.textureCoordsIndex - 1].u);\n              textureData.push(textureCoords[triangleVert.textureCoordsIndex - 1].v);\n            }\n            if (vertexNormals[triangleVert.vertexNormalIndex - 1]) {\n              normalData.push(vertexNormals[triangleVert.vertexNormalIndex - 1].x);\n              normalData.push(vertexNormals[triangleVert.vertexNormalIndex - 1].y);\n              normalData.push(vertexNormals[triangleVert.vertexNormalIndex - 1].z);\n            }\n            barycentricCoords.push(barycentricValues[index][0]);\n            barycentricCoords.push(barycentricValues[index][1]);\n            barycentricCoords.push(barycentricValues[index][2]);\n          });\n        }\n      });\n\n      // Calculate tangent/bitangent data\n      if (textureData.length > 1 && vertexData.length > 1) {\n        var _calculateTangents = (0,_api_obj_calc_api_js__WEBPACK_IMPORTED_MODULE_0__.calculateTangents)(vertexData, textureData);\n        tangentData = _calculateTangents.tangentData;\n        bitangentData = _calculateTangents.bitangentData;\n      }\n      if (normalData.length < 1) console.warn(\"No normal data loaded for model.\");\n      if (vertexData.length < 1) console.warn(\"No vertex data loaded for model.\");\n      if (textureData.length < 1) console.warn(\"No texture data loaded for model.\");\n      return {\n        uvs: textureData,\n        normals: normalData,\n        vertices: vertexData,\n        boundingVector: scalingVector,\n        tangents: tangentData,\n        bitangents: bitangentData,\n        barycentricCoords: barycentricCoords\n      };\n    }\n  }, {\n    key: \"parseObject\",\n    value: function parseObject(lineItems) {\n      var modelName = lineItems.length >= 2 ? lineItems[1] : this.defaultModelName;\n      this.result.models.push({\n        name: modelName,\n        vertices: [],\n        textureCoords: [],\n        vertexNormals: [],\n        faces: [],\n        boundingBox: {\n          maxX: 0,\n          maxY: 0,\n          maxZ: 0,\n          minX: 0,\n          minY: 0,\n          minZ: 0\n        }\n      });\n      this.currentGroup = '';\n      this.smoothingGroup = 0;\n    }\n  }, {\n    key: \"parseGroup\",\n    value: function parseGroup(lineItems) {\n      if (lineItems.length != 2) {\n        throw 'Group statements must have exactly 1 argument (eg. g group_1)';\n      }\n      this.currentGroup = lineItems[1];\n    }\n  }, {\n    key: \"parseVertexCoords\",\n    value: function parseVertexCoords(lineItems) {\n      var x = lineItems.length >= 2 ? parseFloat(lineItems[1]) : 0.0;\n      var y = lineItems.length >= 3 ? parseFloat(lineItems[2]) : 0.0;\n      var z = lineItems.length >= 4 ? parseFloat(lineItems[3]) : 0.0;\n      this.currentModel().vertices.push({\n        x: x,\n        y: y,\n        z: z\n      });\n\n      // Update bounding Box\n      if (this.currentModel().boundingBox.maxX < x) {\n        this.currentModel().boundingBox.maxX = x;\n      }\n      if (this.currentModel().boundingBox.maxY < y) {\n        this.currentModel().boundingBox.maxY = y;\n      }\n      if (this.currentModel().boundingBox.maxZ < z) {\n        this.currentModel().boundingBox.maxZ = z;\n      }\n      if (this.currentModel().boundingBox.minX > x) {\n        this.currentModel().boundingBox.minX = x;\n      }\n      if (this.currentModel().boundingBox.minY > y) {\n        this.currentModel().boundingBox.minY = y;\n      }\n      if (this.currentModel().boundingBox.minZ > z) {\n        this.currentModel().boundingBox.minZ = z;\n      }\n    }\n  }, {\n    key: \"parseTextureCoords\",\n    value: function parseTextureCoords(lineItems) {\n      var u = lineItems.length >= 2 ? parseFloat(lineItems[1]) : 0.0;\n      var v = lineItems.length >= 3 ? parseFloat(lineItems[2]) : 0.0;\n      var w = lineItems.length >= 4 ? parseFloat(lineItems[3]) : 0.0;\n      if (lineItems.length >= 4) this.currentModel().textureCoords.push({\n        u: u,\n        v: v,\n        w: w\n      });else this.currentModel().textureCoords.push({\n        u: u,\n        v: v\n      });\n    }\n  }, {\n    key: \"parseVertexNormal\",\n    value: function parseVertexNormal(lineItems) {\n      var x = lineItems.length >= 2 ? parseFloat(lineItems[1]) : 0.0;\n      var y = lineItems.length >= 3 ? parseFloat(lineItems[2]) : 0.0;\n      var z = lineItems.length >= 4 ? parseFloat(lineItems[3]) : 0.0;\n      this.currentModel().vertexNormals.push({\n        x: x,\n        y: y,\n        z: z\n      });\n    }\n  }, {\n    key: \"parsePolygon\",\n    value: function parsePolygon(lineItems) {\n      var totalVertices = lineItems.length - 1;\n      if (totalVertices < 3) {\n        throw \"Face statement has less than 3 vertices\".concat(this.filePath).concat(this.lineNumber);\n      }\n      var face = {\n        material: this.currentMaterial,\n        group: this.currentGroup,\n        smoothingGroup: this.smoothingGroup,\n        vertices: []\n      };\n      for (var i = 0; i < totalVertices; i += 1) {\n        var vertexString = lineItems[i + 1];\n        var vertexValues = vertexString.split('/');\n        if (vertexValues.length < 1 || vertexValues.length > 3) {\n          throw \"Too many values (separated by /) for a single vertex\".concat(this.filePath).concat(this.lineNumber);\n        }\n        var vertexIndex = 0;\n        var textureCoordsIndex = 0;\n        var vertexNormalIndex = 0;\n        vertexIndex = parseInt(vertexValues[0]);\n        if (vertexValues.length > 1 && !vertexValues[1] == '') {\n          textureCoordsIndex = parseInt(vertexValues[1]);\n        }\n        if (vertexValues.length > 2) {\n          vertexNormalIndex = parseInt(vertexValues[2]);\n        }\n        if (vertexIndex == 0) {\n          throw 'Faces uses invalid vertex index of 0';\n        }\n\n        // Negative vertex indices refer to the nth last defined vertex\n        // convert these to postive indices for simplicity\n        if (vertexIndex < 0) {\n          vertexIndex = this.currentModel().vertices.length + 1 + vertexIndex;\n        }\n        face.vertices.push({\n          vertexIndex: vertexIndex,\n          textureCoordsIndex: textureCoordsIndex,\n          vertexNormalIndex: vertexNormalIndex\n        });\n      }\n      this.currentModel().faces.push(face);\n    }\n  }, {\n    key: \"parseMtlLib\",\n    value: function parseMtlLib(lineItems) {\n      if (lineItems.length >= 2) {\n        this.result.materialLibraries.push(lineItems[1]);\n      }\n    }\n  }, {\n    key: \"parseUseMtl\",\n    value: function parseUseMtl(lineItems) {\n      if (lineItems.length >= 2) {\n        this.currentMaterial = lineItems[1];\n      }\n    }\n  }, {\n    key: \"parseSmoothShadingStatement\",\n    value: function parseSmoothShadingStatement(lineItems) {\n      if (lineItems.length != 2) {\n        throw 'Smoothing group statements must have exactly 1 argument (eg. s <number|off>)';\n      }\n      var groupNumber = lineItems[1].toLowerCase() == 'off' ? 0 : parseInt(lineItems[1]);\n      this.smoothingGroup = groupNumber;\n    }\n  }]);\n  return OBJData;\n}();\n\n//# sourceURL=webpack://rendering-engine/./js/obj-loader.js?");

/***/ }),

/***/ "./js/shader.js":
/*!**********************!*\
  !*** ./js/shader.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShaderProgram\": () => (/* binding */ ShaderProgram)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar ShaderProgram = /*#__PURE__*/function () {\n  /**\n   * Class Constructor\n   * @param {String} vertSource The Source code for the vertex shader\n   * @param {String} fragSource The Source code for the fragment shader\n   */\n  function ShaderProgram(vertSource, fragSource) {\n    _classCallCheck(this, ShaderProgram);\n    _defineProperty(this, \"vertexSource\", null);\n    _defineProperty(this, \"fragmentSource\", null);\n    _defineProperty(this, \"vertexShader\", null);\n    _defineProperty(this, \"fragmentShader\", null);\n    _defineProperty(this, \"program\", null);\n    // We have passed in two functions: vertex and fragment.\n    // First we compile these functions.\n    this.vertexSource = vertSource;\n    this.fragmentSource = fragSource;\n    this.vertexShader = this.generateShaderFunction(gl.VERTEX_SHADER, vertSource);\n    this.fragmentShader = this.generateShaderFunction(gl.FRAGMENT_SHADER, fragSource);\n\n    // Get the GL context to reserve a spot for a shader program\n    // The shaderID is the ID of the created program\n    this.program = gl.createProgram();\n\n    // Attach the compiled functions to the program\n    gl.attachShader(this.program, this.vertexShader);\n    gl.attachShader(this.program, this.fragmentShader);\n    // This step is required to form an Executable Program,\n    // this ensures the inputs/outputs line up between the two functions,\n    // think of it as linking libraries for a UNIX executable\n    gl.linkProgram(this.program);\n\n    // If there was an error linking, print it.\n    // More than likely the functions did not have correct ins/outs\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      var info = gl.getProgramInfoLog(this.program);\n      throw \"Could not link shader program: \".concat(info);\n    }\n  }\n\n  /**\n   * \n   * @param {GLenum} type The Type of Shader (one of: gl.VERTEX_SHADER, gl.FRAGMENT_SHADER)\n   * @param {String} source The source code\n   * @returns {WebGLShader} The compiled shader \n   */\n  _createClass(ShaderProgram, [{\n    key: \"generateShaderFunction\",\n    value: function generateShaderFunction(type, source) {\n      var shader = gl.createShader(type);\n\n      // Send the source to the shader object\n      gl.shaderSource(shader, source);\n\n      // Compile the shader program\n      gl.compileShader(shader);\n\n      // See if it compiled successfully\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        var whichShader = type == gl.VERTEX_SHADER ? 'vertext' : 'frag';\n        alert(\"An error occurred compiling the \".concat(whichShader, \" shader: \").concat(gl.getShaderInfoLog(shader)));\n        gl.deleteShader(shader);\n        return null;\n      }\n      return shader;\n    }\n\n    /**\n     * getAttributeLocations gets a dictionary of the specified attribute locations in a program\n     * @param {Array.<String>} attributeNames A list of attribute names to get from a shader program\n     */\n  }, {\n    key: \"getAttributeLocations\",\n    value: function getAttributeLocations(attributeNames) {\n      var _this = this;\n      var attributeLocations = {};\n      attributeNames.forEach(function (attributeName) {\n        // getAttribLocation takes a program and string that corresponds with an attribute\n        // In the simple.vert file, an example attribute is 'attribute vec3 aVertexPosition;'\n        // It is identified by the string 'aVertexPosition'\n        attributeLocations[attributeName] = gl.getAttribLocation(_this.program, attributeName);\n      });\n      return attributeLocations;\n    }\n\n    /**\n     * getUniformLocations returns the uniform locations for a specified list of uniforms\n     * @param {Array.<String>} uniformNames A list of uniform names to find locations of inside of a shader \n     */\n  }, {\n    key: \"getUniformLocations\",\n    value: function getUniformLocations(uniformNames) {\n      var _this2 = this;\n      var uniformLocations = {};\n      // getUniformLocation works pretty much the same as the get attrib location.\n      uniformNames.forEach(function (uniformName) {\n        uniformLocations[uniformName] = gl.getUniformLocation(_this2.program, uniformName);\n      });\n      return uniformLocations;\n    }\n  }]);\n  return ShaderProgram;\n}();\n\n//# sourceURL=webpack://rendering-engine/./js/shader.js?");

/***/ }),

/***/ "./js/vertex-data.js":
/*!***************************!*\
  !*** ./js/vertex-data.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ElementArrayData\": () => (/* binding */ ElementArrayData),\n/* harmony export */   \"VertexArrayData\": () => (/* binding */ VertexArrayData)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar VertexArrayData = /*#__PURE__*/function () {\n  /**\n   * Buffer Constructor\n   * @param {Array.<Number>} data Data to load into a buffer on GPU \n   * @param {Number} type Type of buffer (must be one of: gl.INT, gl.FLOAT, gl.UNSIGNED_INT)\n   * @param {Number} perVertexComponents Number of items each vertex needs\n   */\n  function VertexArrayData(data, type, perVertexComponents) {\n    _classCallCheck(this, VertexArrayData);\n    _defineProperty(this, \"bufferID\", null);\n    _defineProperty(this, \"data\", null);\n    _defineProperty(this, \"type\", null);\n    _defineProperty(this, \"components\", null);\n    this.bufferID = gl.createBuffer();\n    this.data = data;\n    this.components = perVertexComponents;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferID);\n    switch (type) {\n      case gl.INT:\n        gl.bufferData(gl.ARRAY_BUFFER, new Int32Array(this.data), gl.STATIC_DRAW);\n        this.type = gl.INT;\n        break;\n      case gl.FLOAT:\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.data), gl.STATIC_DRAW);\n        this.type = gl.FLOAT;\n        break;\n      case gl.UNSIGNED_INT:\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(this.data), gl.STATIC_DRAW);\n        this.type = gl.UNSIGNED_INT;\n        break;\n      default:\n        throw \"Unknown Buffer Type: \".concat(type);\n    }\n    // Always a good idea to unbind, avoid later headaches!\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  }\n\n  /**\n   * bindAndEnable binds the buffer data to the specified attribute location for access by a shader program'\n   * @param {Number} vertexAttributeLocation The Attribute Location the Buffer is being bound to.\n   */\n  _createClass(VertexArrayData, [{\n    key: \"bindAndEnable\",\n    value: function bindAndEnable(vertexAttributeLocation) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferID);\n      var numComponents = this.components;\n      var type = this.type;\n      var normalize = false;\n      var stride = 0;\n      var offset = 0;\n      gl.vertexAttribPointer(vertexAttributeLocation, numComponents, type, normalize, stride, offset);\n      gl.enableVertexAttribArray(vertexAttributeLocation);\n    }\n  }]);\n  return VertexArrayData;\n}();\nvar ElementArrayData = /*#__PURE__*/function () {\n  function ElementArrayData(data) {\n    _classCallCheck(this, ElementArrayData);\n    _defineProperty(this, \"bufferID\", null);\n    _defineProperty(this, \"data\", null);\n    _defineProperty(this, \"count\", null);\n    _defineProperty(this, \"type\", null);\n    this.bufferID = gl.createBuffer();\n    this.data = data;\n    this.count = data.length;\n    this.type = gl.UNSIGNED_SHORT;\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufferID);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n  _createClass(ElementArrayData, [{\n    key: \"bindAndEnable\",\n    value: function bindAndEnable() {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufferID);\n    }\n  }]);\n  return ElementArrayData;\n}();\n\n\n//# sourceURL=webpack://rendering-engine/./js/vertex-data.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ARRAY_TYPE\": () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   \"EPSILON\": () => (/* binding */ EPSILON),\n/* harmony export */   \"RANDOM\": () => (/* binding */ RANDOM),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"setMatrixArrayType\": () => (/* binding */ setMatrixArrayType),\n/* harmony export */   \"toRadian\": () => (/* binding */ toRadian)\n/* harmony export */ });\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n//# sourceURL=webpack://rendering-engine/./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"adjoint\": () => (/* binding */ adjoint),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"determinant\": () => (/* binding */ determinant),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"frob\": () => (/* binding */ frob),\n/* harmony export */   \"fromQuat\": () => (/* binding */ fromQuat),\n/* harmony export */   \"fromQuat2\": () => (/* binding */ fromQuat2),\n/* harmony export */   \"fromRotation\": () => (/* binding */ fromRotation),\n/* harmony export */   \"fromRotationTranslation\": () => (/* binding */ fromRotationTranslation),\n/* harmony export */   \"fromRotationTranslationScale\": () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   \"fromRotationTranslationScaleOrigin\": () => (/* binding */ fromRotationTranslationScaleOrigin),\n/* harmony export */   \"fromScaling\": () => (/* binding */ fromScaling),\n/* harmony export */   \"fromTranslation\": () => (/* binding */ fromTranslation),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"fromXRotation\": () => (/* binding */ fromXRotation),\n/* harmony export */   \"fromYRotation\": () => (/* binding */ fromYRotation),\n/* harmony export */   \"fromZRotation\": () => (/* binding */ fromZRotation),\n/* harmony export */   \"frustum\": () => (/* binding */ frustum),\n/* harmony export */   \"getRotation\": () => (/* binding */ getRotation),\n/* harmony export */   \"getScaling\": () => (/* binding */ getScaling),\n/* harmony export */   \"getTranslation\": () => (/* binding */ getTranslation),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"lookAt\": () => (/* binding */ lookAt),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"multiplyScalar\": () => (/* binding */ multiplyScalar),\n/* harmony export */   \"multiplyScalarAndAdd\": () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   \"ortho\": () => (/* binding */ ortho),\n/* harmony export */   \"orthoNO\": () => (/* binding */ orthoNO),\n/* harmony export */   \"orthoZO\": () => (/* binding */ orthoZO),\n/* harmony export */   \"perspective\": () => (/* binding */ perspective),\n/* harmony export */   \"perspectiveFromFieldOfView\": () => (/* binding */ perspectiveFromFieldOfView),\n/* harmony export */   \"perspectiveNO\": () => (/* binding */ perspectiveNO),\n/* harmony export */   \"perspectiveZO\": () => (/* binding */ perspectiveZO),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"targetTo\": () => (/* binding */ targetTo),\n/* harmony export */   \"translate\": () => (/* binding */ translate),\n/* harmony export */   \"transpose\": () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nvar perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nvar ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nfunction str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack://rendering-engine/./node_modules/gl-matrix/esm/mat4.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"angle\": () => (/* binding */ angle),\n/* harmony export */   \"ceil\": () => (/* binding */ ceil),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"dist\": () => (/* binding */ dist),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"div\": () => (/* binding */ div),\n/* harmony export */   \"divide\": () => (/* binding */ divide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"floor\": () => (/* binding */ floor),\n/* harmony export */   \"forEach\": () => (/* binding */ forEach),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"inverse\": () => (/* binding */ inverse),\n/* harmony export */   \"len\": () => (/* binding */ len),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"max\": () => (/* binding */ max),\n/* harmony export */   \"min\": () => (/* binding */ min),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"negate\": () => (/* binding */ negate),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"random\": () => (/* binding */ random),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"round\": () => (/* binding */ round),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"scaleAndAdd\": () => (/* binding */ scaleAndAdd),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"sqrDist\": () => (/* binding */ sqrDist),\n/* harmony export */   \"sqrLen\": () => (/* binding */ sqrLen),\n/* harmony export */   \"squaredDistance\": () => (/* binding */ squaredDistance),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"transformMat2\": () => (/* binding */ transformMat2),\n/* harmony export */   \"transformMat2d\": () => (/* binding */ transformMat2d),\n/* harmony export */   \"transformMat3\": () => (/* binding */ transformMat3),\n/* harmony export */   \"transformMat4\": () => (/* binding */ transformMat4),\n/* harmony export */   \"zero\": () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nfunction fromValues(x, y) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nfunction rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nvar len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nvar sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nvar div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nvar dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nvar sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nvar sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://rendering-engine/./node_modules/gl-matrix/esm/vec2.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"angle\": () => (/* binding */ angle),\n/* harmony export */   \"bezier\": () => (/* binding */ bezier),\n/* harmony export */   \"ceil\": () => (/* binding */ ceil),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"dist\": () => (/* binding */ dist),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"div\": () => (/* binding */ div),\n/* harmony export */   \"divide\": () => (/* binding */ divide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"floor\": () => (/* binding */ floor),\n/* harmony export */   \"forEach\": () => (/* binding */ forEach),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"hermite\": () => (/* binding */ hermite),\n/* harmony export */   \"inverse\": () => (/* binding */ inverse),\n/* harmony export */   \"len\": () => (/* binding */ len),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"max\": () => (/* binding */ max),\n/* harmony export */   \"min\": () => (/* binding */ min),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"negate\": () => (/* binding */ negate),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"random\": () => (/* binding */ random),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"round\": () => (/* binding */ round),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"scaleAndAdd\": () => (/* binding */ scaleAndAdd),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"sqrDist\": () => (/* binding */ sqrDist),\n/* harmony export */   \"sqrLen\": () => (/* binding */ sqrLen),\n/* harmony export */   \"squaredDistance\": () => (/* binding */ squaredDistance),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"transformMat3\": () => (/* binding */ transformMat3),\n/* harmony export */   \"transformMat4\": () => (/* binding */ transformMat4),\n/* harmony export */   \"transformQuat\": () => (/* binding */ transformQuat),\n/* harmony export */   \"zero\": () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nfunction fromValues(x, y, z) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nvar sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nvar div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nvar dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nvar sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nvar len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nvar sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://rendering-engine/./node_modules/gl-matrix/esm/vec3.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/main.js");
/******/ 	
/******/ })()
;